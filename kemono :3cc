local player = game.Players.LocalPlayer
local runService = game:GetService("RunService")
local userInputService = game:GetService("UserInputService")
local tweenService = game:GetService("TweenService")
local mouse = player:GetMouse()
print("Starting")
wait(3)


local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer
local tracers = {}


for _, player in ipairs(Players:GetPlayers()) do
	if player ~= LocalPlayer then
		local tracer = Drawing.new("Line")
		tracer.Thickness = 1.5
		tracer.Color = Color3.fromRGB(255, 255, 255)
		tracer.Transparency = 1
		tracer.Visible = true
		tracers[player] = tracer
	end
end


Players.PlayerAdded:Connect(function(player)
	if player ~= LocalPlayer then
		local tracer = Drawing.new("Line")
		tracer.Thickness = 1.5
		tracer.Color = Color3.fromRGB(255, 255, 255)
		tracer.Transparency = 1
		tracer.Visible = true
		tracers[player] = tracer
	end
end)


Players.PlayerRemoving:Connect(function(player)
	if tracers[player] then
		tracers[player]:Remove()
		tracers[player] = nil
	end
end)

RunService.RenderStepped:Connect(function()
	for player, tracer in pairs(tracers) do
		local char = player.Character
		if char and char:FindFirstChild("HumanoidRootPart") then
			local hrp = char.HumanoidRootPart
			local screenPos, onScreen = Camera:WorldToViewportPoint(hrp.Position)

			if onScreen then
				tracer.From = Vector2.new(Camera.ViewportSize.X / 2, 0)
				tracer.To = Vector2.new(screenPos.X, screenPos.Y)
				tracer.Visible = true
			else
				tracer.Visible = false
			end
		else
			tracer.Visible = false
		end
	end
end)

local speedGui = Instance.new("ScreenGui")
speedGui.Parent = LocalPlayer:WaitForChild("PlayerGui")
speedGui.ResetOnSpawn = false

local speedLabel = Instance.new("TextLabel")
speedLabel.Size = UDim2.new(0, 200, 0, 50)
speedLabel.Position = UDim2.new(1, -180, 1, -60)
speedLabel.AnchorPoint = Vector2.new(1, 1)
speedLabel.BackgroundTransparency = 1
speedLabel.TextTransparency = 1
speedLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
speedLabel.TextScaled = true
speedLabel.Font = Enum.Font.Code
speedLabel.Text = "0 studs/s"
speedLabel.Parent = speedGui

local cuteLabel = Instance.new("TextLabel")
cuteLabel.Size = UDim2.new(0, 200, 0, 150)
cuteLabel.Position = UDim2.new(1, -30, 1, -120)
cuteLabel.AnchorPoint = Vector2.new(1, 1)
cuteLabel.BackgroundTransparency = 1
cuteLabel.TextColor3 = Color3.fromRGB(41, 38, 38)
cuteLabel.TextScaled = true
cuteLabel.Font = Enum.Font.Code
cuteLabel.Text = "69 studs/s\n" .. LocalPlayer.Name .. "\nOwO"
cuteLabel.Parent = speedGui

RunService.RenderStepped:Connect(function()
	local velocity = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and LocalPlayer.Character.HumanoidRootPart.Velocity
	if velocity then
		local speed = velocity.Magnitude
		speedLabel.Text = string.format("%d studs/s", math.floor(speed))
		cuteLabel.Text = string.format("%d studs/s\n%s\nOwO", math.floor(speed), LocalPlayer.Name)
	end
end)




-- Pre doing stuff
local billboardData = {}
local isBillboardVisible = true
local currentColorIndex = 3
local colorList = {
    BrickColor.new("Dark nougat"),
    BrickColor.new("Tawny"),
    BrickColor.new("Tr. Red"),
    BrickColor.new("Tr. Flu. Reddish orange"),
    BrickColor.new("Pastel Blue"),
    BrickColor.new("Pastel violet"),
    BrickColor.new("Black"),
    BrickColor.new("Pastel brown"),
    BrickColor.new("Sand green"),
}
local meshColorMap = {}
local autoChangeEnabled = false

local function checkForWorldModel()
    local localPlayerModel = player.Character
    if not localPlayerModel then return end

    local worldModel = localPlayerModel:FindFirstChild("WorldModel")
    if worldModel then
        local pointingLight = worldModel:FindFirstChildOfClass("PointLight") or worldModel:FindFirstChildOfClass("PointingLight")
        if pointingLight then
            pointingLight.Brightness = 1000
            pointingLight.Range = 60
            pointingLight.Color = Color3.fromRGB(170, 0, 0)
        end
    end
end

local function disableCameraBlur()
    local blur = workspace.Camera:FindFirstChild("Blur")
    if blur then
        blur.Enabled = false
    end
end

checkForWorldModel()
disableCameraBlur()

------------------------------------------------------------
-- ESP (Health -> "ASD")
------------------------------------------------------------

local function PlayerEsp(character)
    local hrp = character:FindFirstChild("HumanoidRootPart")
    if not hrp then return end

    local billboardesp = Instance.new("BillboardGui")
    billboardesp.Name = "DistanceBillboard"
    billboardesp.Size = UDim2.new(0, 100, 0, 75)
    billboardesp.StudsOffset = Vector3.new(0, 3, 0)
    billboardesp.AlwaysOnTop = true
    billboardesp.Adornee = hrp
    billboardesp.Parent = character
    billboardesp.Enabled = true

    local function makeLabel(name, pos, color)
        local lbl = Instance.new("TextLabel")
        lbl.Name = name
        lbl.Size = UDim2.new(1, 0, 1/3, 0)
        lbl.Position = pos
        lbl.BackgroundTransparency = 1
        lbl.TextColor3 = color
        lbl.TextScaled = false
        lbl.Font = Enum.Font.Bodoni
        lbl.TextSize = 14
        lbl.Visible = true
        lbl.Parent = billboardesp
        return lbl
    end

    local hpLabel = makeLabel("HPLabel", UDim2.new(0, 0, 0, 0), Color3.fromRGB(52, 235, 155))
    local nameLabel = makeLabel("NameLabel", UDim2.new(0, 0, 1/4, 0), Color3.fromRGB(235, 168, 52))
    local distanceLabel = makeLabel("DistanceLabel", UDim2.new(0, 0, 2/4, 0), Color3.fromRGB(204, 52, 235))

    local conn
    conn = runService.Heartbeat:Connect(function()
        local myHRP = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        local targetHRP = character:FindFirstChild("HumanoidRootPart")
        if not (myHRP and targetHRP and nameLabel and nameLabel.Parent) then
            if conn then conn:Disconnect() end
            if billboardesp then billboardesp:Destroy() end
            return
        end

        local distStuds = (myHRP.Position - targetHRP.Position).Magnitude
        local distMeters = distStuds / 3.571
        local visible = distStuds <= 2200
        hpLabel.Visible = visible
        nameLabel.Visible = visible
        distanceLabel.Visible = visible

        if visible then
            -- Change health text to "ASD"
            hpLabel.Text = "i hard abuse fentanyl"
            nameLabel.Text = "Name: " .. character.Name
            distanceLabel.Text = "Distance: " .. math.floor(distMeters) .. "m"

            local minSize, maxSize, growStart, maxDist = 14, 16, 400, 2200
            local t = math.clamp((distStuds - growStart) / (maxDist - growStart), 0, 1)
            local size = minSize + t * (maxSize - minSize)

            hpLabel.TextSize = size
            nameLabel.TextSize = size
            distanceLabel.TextSize = size
        end
    end)

    character.AncestryChanged:Connect(function(_, parent)
        if not parent then
            if conn then conn:Disconnect() end
            if billboardesp then billboardesp:Destroy() end
        end
    end)
end

for _, model in ipairs(workspace:GetChildren()) do
    if model:IsA("Model") and model:FindFirstChild("HumanoidRootPart") and model ~= player.Character then
        PlayerEsp(model)
    end
end

workspace.ChildAdded:Connect(function(child)
    if child:IsA("Model") and child:FindFirstChild("HumanoidRootPart") and child ~= player.Character then
        PlayerEsp(child)
    end
end)

------------------------------------------------------------
-- Gun changer (f3)
------------------------------------------------------------

local function cleanSurfaceAppearance(surfaceAppearance)
    if typeof(surfaceAppearance) ~= "Instance" or not surfaceAppearance:IsDescendantOf(game) then return end
    pcall(function() surfaceAppearance.ColorMap = nil end)
    pcall(function() surfaceAppearance.MetalnessMap = nil end)
    pcall(function() surfaceAppearance.NormalMap = nil end)
    pcall(function() surfaceAppearance.RoughnessMap = nil end)
    pcall(function() surfaceAppearance.AlphaMode = Enum.AlphaMode.Overlay end)
end

local function updateWeaponAppearance(tween)
    local weapon = workspace.CurrentCamera:FindFirstChild("CurrentWeapon")
    if not weapon then return end

    for _, mesh in ipairs(weapon:GetDescendants()) do
        if mesh:IsA("MeshPart") then
            local sa = mesh:FindFirstChildOfClass("SurfaceAppearance")
            if sa then cleanSurfaceAppearance(sa) end

            meshColorMap[mesh.Name] = currentColorIndex
            local color = colorList[currentColorIndex].Color
            mesh.Transparency = 0.56
            mesh.BrickColor = colorList[currentColorIndex]

            if tween then
                tweenService:Create(mesh, TweenInfo.new(0.6), {
                    Color = color,
                    Transparency = 0.56,
                }):Play()
            else
                mesh.Color = color
            end
        end
    end
end

local lastWeapon = nil
runService.Heartbeat:Connect(function()
    if not autoChangeEnabled then return end
    local weapon = workspace.CurrentCamera:FindFirstChild("CurrentWeapon")
    if weapon and weapon ~= lastWeapon then
        lastWeapon = weapon
        updateWeaponAppearance(false)
        print(lastWeapon)
    end
end)

------------------------------------------------------------
-- No fog
------------------------------------------------------------
local function NightTime()
    local atmosphere = game.Lighting:FindFirstChildOfClass("Atmosphere")
    if atmosphere then
        atmosphere:Destroy()
    end
end

------------------------------------------------------------
-- Always day inc with no fog
------------------------------------------------------------
local function AlwaysDay()
    sets.Weather.CurrentTimeOverride = 10
end

------------------------------------------------------------
-- Other cleanup shit
------------------------------------------------------------
local function cleanupPlayer(targetPlayer)
    if billboardData[targetPlayer] then
        local data = billboardData[targetPlayer]
        if data.conn then data.conn:Disconnect() end
        if data.billboard and data.billboard.Parent then
            data.billboard:Destroy()
        end
        billboardData[targetPlayer] = nil
    end
end

local function onCharacterAdded(targetPlayer, character)
    cleanupPlayer(targetPlayer)
    PlayerEsp(character, targetPlayer)
end

local function onPlayerAdded(targetPlayer)
    if targetPlayer == player then return end
    if targetPlayer.Character then onCharacterAdded(targetPlayer, targetPlayer.Character) end
    targetPlayer.CharacterAdded:Connect(function(char) onCharacterAdded(targetPlayer, char) end)
    targetPlayer.AncestryChanged:Connect(function(_, parent)
        if not parent then cleanupPlayer(targetPlayer) end
    end)
end

for _, p in ipairs(game.Players:GetPlayers()) do onPlayerAdded(p) end
game.Players.PlayerAdded:Connect(onPlayerAdded)
game.Players.PlayerRemoving:Connect(cleanupPlayer)

------------------------------------------------------------
-- Input listener
------------------------------------------------------------
userInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.UserInputType == Enum.UserInputType.Keyboard then
        if input.KeyCode == Enum.KeyCode.F1 then
            PlayerEsp()
        elseif input.KeyCode == Enum.KeyCode.F2 then
            NightTime()
            AlwaysDay()
        elseif input.KeyCode == Enum.KeyCode.F3 then
            updateWeaponAppearance(true)
        elseif input.KeyCode == Enum.KeyCode.F4 then
            HAHAHAHA()
        elseif input.KeyCode == Enum.KeyCode.F5 then
            HAHAHAHA()
        end
    end
end)

print("loaded")
