local player = game.Players.LocalPlayer
local runService = game:GetService("RunService")
local userInputService = game:GetService("UserInputService")
local tweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local LocalPlayer = game:GetService("Players").LocalPlayer

local billboardData = {}
local isBillboardVisible = true
local currentColorIndex = 3
local colorList = {
    BrickColor.new("Dark nougat"),
    BrickColor.new("Tawny"),
    BrickColor.new("Tr. Red"),
    BrickColor.new("Tr. Flu. Reddish orange"),
    BrickColor.new("Pastel Blue"),
    BrickColor.new("Pastel violet"),
    BrickColor.new("Black"),
    BrickColor.new("Pastel brown"),
    BrickColor.new("Sand green"),
}
local meshColorMap = {}
local autoChangeEnabled = false

------------------------------------------------------------
-- Esp (it's ASS)
------------------------------------------------------------
local function PlayerEsp(character)
    local hrp = character:FindFirstChild("HumanoidRootPart")
    if not hrp then return end

    local billboardesp = Instance.new("BillboardGui")
    billboardesp.Name = "DistanceBillboard"
    billboardesp.Size = UDim2.new(0, 100, 0, 75)
    billboardesp.StudsOffset = Vector3.new(0, 3, 0)
    billboardesp.AlwaysOnTop = true
    billboardesp.Adornee = hrp
    billboardesp.Parent = character
    billboardesp.visible = true


    local function makeLabel(name, pos, color)
        local lbl = Instance.new("TextLabel")
        lbl.Name = name
        lbl.Size = UDim2.new(1, 0, 1/3, 0)
        lbl.Position = pos
        lbl.BackgroundTransparency = 1
        lbl.TextColor3 = color
        lbl.TextScaled = false
        lbl.Font = Enum.Font.Bodoni
        lbl.TextSize = 14
        lbl.Visible = true
        lbl.Parent = billboard
        return lbl
    end

    local hpLabel = makeLabel("HPLabel", UDim2.new(0, 0, 0, 0), Color3.fromRGB(52, 235, 155))
    local nameLabel = makeLabel("NameLabel", UDim2.new(0, 0, 1/4, 0), Color3.fromRGB(235, 168, 52))
    local distanceLabel = makeLabel("DistanceLabel", UDim2.new(0, 0, 2/4, 0), Color3.fromRGB(204, 52, 235))

    local conn
    conn = RunService.Heartbeat:Connect(function()
        local myHRP = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        local targetHRP = character and character:FindFirstChild("HumanoidRootPart")
        if not (myHRP and targetHRP and nameLabel and nameLabel.Parent) then
            if conn then conn:Disconnect() end
            if billboard then billboard:Destroy() end
            return
        end

        local distStuds = (myHRP.Position - targetHRP.Position).Magnitude
        local distMeters = distStuds / 3.571

        local visible = distStuds <= 2200
        hpLabel.Visible = visible
        nameLabel.Visible = visible
        distanceLabel.Visible = visible

        if visible then
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                hpLabel.Text = "HP: " .. math.floor(humanoid.Health)
            end
            nameLabel.Text = "Name: " .. character.Name
            distanceLabel.Text = "Distance: " .. math.floor(distMeters) .. "m"

            local minSize, maxSize, growStart, maxDist = 14, 16, 400, 2200
            local t = math.clamp((distStuds - growStart) / (maxDist - growStart), 0, 1)
            local size = minSize + t * (maxSize - minSize)

            hpLabel.TextSize = size
            nameLabel.TextSize = size
            distanceLabel.TextSize = size
        end
    end)

    character.AncestryChanged:Connect(function(_, parent)
        if not parent then
            if conn then conn:Disconnect() end
            if billboard then billboard:Destroy() end
        end
    end)
end

for _, model in ipairs(workspace:GetChildren()) do
    if model:IsA("Model") and model:FindFirstChild("HumanoidRootPart") and model ~= LocalPlayer.Character then
        PlayerEsp(model)
    end
end

workspace.ChildAdded:Connect(function(child)
    if child:IsA("Model") and child:FindFirstChild("HumanoidRootPart") and child ~= LocalPlayer.Character then
        PlayerEsp(child)
    end
end)


------------------------------------------------------------
-- Gun changerr (f3) :3ccccc
------------------------------------------------------------


local function cleanSurfaceAppearance(surfaceAppearance)
    surfaceAppearance.ColorMap = ""
    surfaceAppearance.MetalnessMap = ""
    surfaceAppearance.NormalMap = ""
    surfaceAppearance.RoughnessMap = ""
    surfaceAppearance.AlphaMode = Enum.AlphaMode.Overlay
end

local function updateWeaponAppearance(tween)
    local weapon = workspace.CurrentCamera:FindFirstChild("CurrentWeapon")
    if not weapon then return end

    for _, mesh in ipairs(weapon:GetDescendants()) do
        if mesh:IsA("MeshPart") then
            local sa = mesh:FindFirstChildOfClass("SurfaceAppearance")
            if sa then cleanSurfaceAppearance(sa) end

            meshColorMap[mesh.Name] = currentColorIndex
            local color = colorList[currentColorIndex].Color
            mesh.Transparency = 0.56
            mesh.BrickColor = colorList[currentColorIndex]

            if tween then
                tweenService:Create(mesh, TweenInfo.new(0.6), {
                    Color = color,
                    Transparency = 0.56,
                }):Play()
            else
                mesh.Color = color
            end
        end
    end
end


local lastWeapon = nil
runService.Heartbeat:Connect(function()
    if not autoChangeEnabled then return end

    local weapon = workspace.CurrentCamera:FindFirstChild("CurrentWeapon")
    if weapon and weapon ~= lastWeapon then
        lastWeapon = weapon
        updateWeaponAppearance(false)
        print(lastWeapon)
    end
end)

------------------------------------------------------------
-- nofog
------------------------------------------------------------

local function NightTime()
    local atmosphere = game.Lighting:FindFirstChildOfClass("Atmosphere")
    
    if atmosphere then
        atmosphere:Destroy()
    end
end

------------------------------------------------------------
-- always day inc with nofog  :3ccccc
------------------------------------------------------------
local function AlwaysDay()
    ReplicatedStorage.GameConfig.Settings.Weather.CurrentTimeOverride = 10
end

------------------------------------------------------------
--INV VIEW
------------------------------------------------------------
local fovCircle = nil
local gunUI = nil
local updateConnection = nil

function toggleGunInventoryUI()
    if gunUI then
        if fovCircle then
            fovCircle:Remove()
            fovCircle = nil
        end
        if updateConnection then
            updateConnection:Disconnect()
            updateConnection = nil
        end
        gunUI:Destroy()
        gunUI = nil
        return
    end

    fovCircle = Drawing.new("Circle")
    fovCircle.Color = Color3.fromRGB(170, 0, 255)
    fovCircle.Thickness = 2
    fovCircle.Radius = 150
    fovCircle.Filled = false
    fovCircle.Visible = true

    gunUI = Instance.new("ScreenGui")
    gunUI.Name = "GunInventoryViewer"
    gunUI.Parent = LocalPlayer:WaitForChild("PlayerGui")
    gunUI.ResetOnSpawn = false

    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 200, 0, 120)
    frame.Position = UDim2.new(0.5, -100, 0.75, 0)
    frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    frame.BorderSizePixel = 0
    frame.Active = true
    frame.Draggable = true
    frame.Parent = gunUI

    local corner = Instance.new("UICorner", frame)
    corner.CornerRadius = UDim.new(0, 10)

    local stroke = Instance.new("UIStroke", frame)
    stroke.Color = Color3.fromRGB(170, 0, 255)
    stroke.Thickness = 2

    local labels = {}
    for i = 1, 4 do
        local lbl = Instance.new("TextLabel", frame)
        lbl.Size = UDim2.new(1, -10, 0.25, -2)
        lbl.Position = UDim2.new(0, 5, 0.25 * (i - 1), 0)
        lbl.BackgroundTransparency = 1
        lbl.TextColor3 = Color3.new(1, 1, 1)
        lbl.Text = "..."
        lbl.Font = Enum.Font.SourceSans
        lbl.TextSize = 16
        lbl.TextXAlignment = Enum.TextXAlignment.Left
        table.insert(labels, lbl)
    end

    updateConnection = RunService.Heartbeat:Connect(function()
        fovCircle.Position = Vector2.new(Mouse.X, Mouse.Y)

        local closestPlayer = nil
        local closestDistance = fovCircle.Radius

        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                local worldPos = player.Character.HumanoidRootPart.Position
                local screenPos, onScreen = Camera:WorldToViewportPoint(worldPos)

                if onScreen then
                    local mousePos = Vector2.new(Mouse.X, Mouse.Y)
                    local playerScreenPos = Vector2.new(screenPos.X, screenPos.Y)
                    local distance = (mousePos - playerScreenPos).Magnitude

                    if distance <= closestDistance then
                        closestDistance = distance
                        closestPlayer = player
                    end
                end
            end
        end

        if closestPlayer then
            labels[1].Text = "Player: " .. closestPlayer.Name

            local inventory = closestPlayer:FindFirstChild("GunInventory")
            if inventory then
                for i, slot in ipairs({"Slot1", "Slot2", "Slot3"}) do
                    local val = inventory:FindFirstChild(slot)
                    labels[i+1].Text = slot .. ": " .. (val and val.Value or "None")
                end
            else
                labels[2].Text = "Slot1: None"
                labels[3].Text = "Slot2: None"
                labels[4].Text = "Slot3: None"
            end
        else
            for i, lbl in ipairs(labels) do
                lbl.Text = i == 1 and "No player" or "..."
            end
        end
    end)
end

--other cleanup shit

local function cleanupPlayer(targetPlayer)
    if billboardData[targetPlayer] then
        local data = billboardData[targetPlayer]
        if data.conn then data.conn:Disconnect() end
        if data.billboard and data.billboard.Parent then
            data.billboard:Destroy()
        end
        billboardData[targetPlayer] = nil
    end
end

local function onCharacterAdded(targetPlayer, character)
    cleanupPlayer(targetPlayer)
    PlayerEsp(character, targetPlayer)
end

local function onPlayerAdded(targetPlayer)
    if targetPlayer == player then return end
    if targetPlayer.Character then onCharacterAdded(targetPlayer, targetPlayer.Character) end
    targetPlayer.CharacterAdded:Connect(function(char) onCharacterAdded(targetPlayer, char) end)
    targetPlayer.AncestryChanged:Connect(function(_, parent)
        if not parent then cleanupPlayer(targetPlayer) end
    end)
end

for _, p in ipairs(game.Players:GetPlayers()) do onPlayerAdded(p) end
game.Players.PlayerAdded:Connect(onPlayerAdded)
game.Players.PlayerRemoving:Connect(cleanupPlayer)




local function applyColorToMesh(mesh, colorIndex, tween)
    local color = colorList[colorIndex]
    meshColorMap[mesh.Name] = colorIndex
    mesh.Transparency = 0.56

    if tween then
        tweenService:Create(mesh, TweenInfo.new(0.6), {
            Color = color.Color,
            BrickColor = color,
            Transparency = 0.56,
        }):Play()
    else
        mesh.BrickColor = color
    end
end

local function applyToWeapon(weapon, tween)
    for _, mesh in ipairs(weapon:GetDescendants()) do
        if mesh:IsA("MeshPart") then
            local sa = mesh:FindFirstChildOfClass("SurfaceAppearance")
            if sa then cleanSurfaceAppearance(sa) end
            local colorIndex = (meshColorMap[mesh.Name] or currentColorIndex)
            applyColorToMesh(mesh, colorIndex, tween)
        end
    end
end


--toggles
userInputService.InputBegan:Connect(function(input, gameProcessed)
	if gameProcessed then return end

	if input.KeyCode == Enum.KeyCode.F1 then
		isBillboardVisible = not isBillboardVisible
        CarEsp()

	elseif input.KeyCode == Enum.KeyCode.F2 then
		NightTime()
        AlwaysDay()

    elseif input.KeyCode == Enum.KeyCode.F3 then
        currentColorIndex = (currentColorIndex % #colorList) + 1
        autoChangeEnabled = true
        updateWeaponAppearance()

    elseif input.KeyCode == Enum.KeyCode.F4 then
        toggleGunInventoryUI()

    elseif input.KeyCode == Enum.KeyCode.F5 then
		ColorRape()
	end
end)


------------------------------------------------------------

print("1.0.2 fixed inv view?? idk not tested yet")
print("F1 esp")
print("F2 no fog")
print("F3 change weapon mesh color thing idk press it multiple times")
print("F4 to toggle inv view lool")
print("F5 to set fov to 120 :) ")
